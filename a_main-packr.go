// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package main

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./template", "index.html", "\"PGh0bWwgbGFuZz0iZXMiPgoKPGhlYWQ+CiAgPHRpdGxlPkNhbWJpbyBkZSBjb250cmFzZSZudGlsZGU7YTwvdGl0bGU+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0iYWxsIiBocmVmPSJzdHlsZS5jc3MiLz4KCiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ienhjdmJuLmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJqdXJhdGlvbi5qcyI+PC9zY3JpcHQ+CjwvaGVhZD4KCjxib2R5PgogIDxkaXYgY2xhc3M9ImxvZ2luLXBhZ2UiPgogICAgPGRpdiBjbGFzcz0iZm9ybSI+CiAgICAgIDxpbWcgaWQ9J2xvZ28nIHNyYz0nbG9nby5wbmcnIC8+CiAgICAgIDxmb3JtIGNsYXNzPSJsb2dpbi1mb3JtIiBpZD0iZGF0YS1mb3JtIj4KICAgICAgICB7eyAuY3NyZkZpZWxkIH19CgogICAgICAgIDxpbnB1dCBpZD0idXNlciIgbmFtZT0idXNlciIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IlVzdWFyaW8gZGVsIGRvbWluaW8iIHJlcXVpcmVkLz4KICAgICAgICA8aW5wdXQgbmFtZT0ib2xkX3Bhc3MiIHR5cGU9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0iQ29udHJhc2UmbnRpbGRlO2EgdmllamEiIHJlcXVpcmVkLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGlucHV0IGlkPSJuZXdfcGFzcyIgbmFtZT0ibmV3X3Bhc3MiIHR5cGU9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0iQ29udHJhc2UmbnRpbGRlO2EgbnVldmEiIHJlcXVpcmVkLz4KICAgICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6IC0xMHB4OyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0cm9uZyIgaWQ9InN0cjEiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Ryb25nIiBpZD0ic3RyMiI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdHJvbmciIGlkPSJzdHIzIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0cm9uZyIgaWQ9InN0cjQiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCBpZD0icmV0eXBlX3Bhc3MiIG5hbWU9InJldHlwZV9wYXNzIiB0eXBlPSJwYXNzd29yZCIgcGxhY2Vob2xkZXI9IlJlcGV0aXIgQ29udHJhc2UmbnRpbGRlO2EgbnVldmEiIHJlcXVpcmVkLz4KICAgICAgICA8YnV0dG9uPkNhbWJpYXIgQ29udHJhc2UmbnRpbGRlO2E8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgICA8ZGl2IGNsYXNzPSJzdmctaWNvbi1zdWNjZXNzIj4KICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDkwLjI3IDkwLjI3Ij4KICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgICAgLmNpcmNsZSB7CiAgICAgICAgICAgICAgICBmaWxsOiAjNjM5OTM5OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAuY2lyY2xlLWNoZWNrIHsKICAgICAgICAgICAgICAgIGZpbGw6IG5vbmU7CiAgICAgICAgICAgICAgICBzdHJva2U6ICNmZmY7CiAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7CiAgICAgICAgICAgICAgICBzdHJva2UtbWl0ZXJsaW1pdDogMTA7CiAgICAgICAgICAgICAgICBzdHJva2Utd2lkdGg6IDRweDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIDwvc3R5bGU+CiAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICA8dGl0bGU+aWNvbi1zdWNjZXNzPC90aXRsZT4KICAgICAgICAgIDxjaXJjbGUgY2xhc3M9ImNpcmNsZSIgY3g9IjQ1LjE0IiBjeT0iNDUuMTQiIHI9IjQ1LjE0Ii8+CiAgICAgICAgICA8cG9seWxpbmUgY2xhc3M9ImNpcmNsZS1jaGVjayIgcG9pbnRzPSI2My40IDI4LjggMzcuOTMgNjMuNDcgMjQuODcgNTAuNTIiLz4KICAgICAgICA8L3N2Zz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InN2Zy1pY29uLWVycm9yIj4KICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDkwLjI3IDkwLjI3Ij4KICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgICAgLmNpcmNsZS0yIHsKICAgICAgICAgICAgICAgIGZpbGw6ICNmNDQzMzY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC54IHsKICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLngtc2luZ2xlIHsKICAgICAgICAgICAgICAgIGZpbGw6ICNmZmY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgICAgPC9kZWZzPgogICAgICAgICAgPHRpdGxlPmljb24tZXJyb3I8L3RpdGxlPgogICAgICAgICAgPGNpcmNsZSBjbGFzcz0iY2lyY2xlLTIiIGN4PSI0NS4xNCIgY3k9IjQ1LjE0IiByPSI0NS4xNCIvPgogICAgICAgICAgPGcgY2xhc3M9IngiPgogICAgICAgICAgICA8cmVjdCBjbGFzcz0ieC1zaW5nbGUiIHg9IjIxLjc3IiB5PSI0My40OSIgd2lkdGg9IjQ2Ljc0IiBoZWlnaHQ9IjMuMzYiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xOC43MiA0NS4xNSkgcm90YXRlKC00NSkiLz4KICAgICAgICAgICAgPHJlY3QgY2xhc3M9Ingtc2luZ2xlIiB4PSI0My40NyIgeT0iMjEuODEiIHdpZHRoPSIzLjM2IiBoZWlnaHQ9IjQ2Ljc0IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTguNzIgNDUuMTYpIHJvdGF0ZSgtNDUpIi8+CiAgICAgICAgICA8L2c+CiAgICAgICAgPC9zdmc+CiAgICAgIDwvZGl2PgogICAgICA8cCBpZD0ibWVzc2FnZSI+PC9wPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJmYWRlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij4KICAgICAgPGRpdiBjbGFzcz0ibGRzLWVsbGlwc2lzIj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjwvZGl2PgogICAgPC9kaXY+CgogIDwvZGl2PgoKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibmV3X3Bhc3MiKS5vbmNoYW5nZSA9IHZhbGlkYXRlUGFzc3dvcmQ7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuZXdfcGFzcyIpLm9ua2V5dXAgPSBuZXdQYXNzd29yZFRlc3QKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJldHlwZV9wYXNzIikub25jaGFuZ2UgPSB2YWxpZGF0ZVBhc3N3b3JkOwogICAgfQoKICAgIGZ1bmN0aW9uIG5ld1Bhc3N3b3JkVGVzdCh2YWx1ZSkgewogICAgICByZXN1bHQgPSB6eGN2Ym4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm5ld19wYXNzIikudmFsdWUsIFtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlciIpLnZhbHVlXSkKCiAgICAgIGlmIChyZXN1bHQuc2NvcmUgPCAyKQogICAgICB7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjEiKS5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayIKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyMiIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyMyIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyNCIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgfWVsc2UgaWYgKHJlc3VsdC5zY29yZSA8IDMpewogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdHIxIikuc3R5bGUuZGlzcGxheSA9ICJub25lIgogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdHIyIikuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjMiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjQiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgIH1lbHNlIGlmIChyZXN1bHQuc2NvcmUgPCA0KXsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyMSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyMiIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RyMyIpLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIgogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdHI0Iikuc3R5bGUuZGlzcGxheSA9ICJub25lIgogICAgICB9ZWxzZSBpZiAocmVzdWx0LnNjb3JlIDwgNSl7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjEiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjIiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjMiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0cjQiKS5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayIKICAgICAgfQoKICAgICAgY29uc29sZS5sb2coanVyYXRpb24uc3RyaW5naWZ5KHJlc3VsdC5jcmFja190aW1lc19zZWNvbmRzLm9ubGluZV9ub190aHJvdHRsaW5nXzEwX3Blcl9zZWNvbmQpKQogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGFzc3dvcmQoKXsKICAgICAgdmFyIHBhc3MyPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZXR5cGVfcGFzcyIpLnZhbHVlOwogICAgICB2YXIgcGFzczE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm5ld19wYXNzIikudmFsdWU7CgogICAgICBpZihwYXNzMSE9cGFzczIpCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJldHlwZV9wYXNzIikuc2V0Q3VzdG9tVmFsaWRpdHkoIk5vIGNvaW5jaWRlbi4iKTsKICAgICAgZWxzZQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZXR5cGVfcGFzcyIpLnNldEN1c3RvbVZhbGlkaXR5KCcnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWJtaXRGb3JtQWpheCAoKQogICAgewogICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7CgogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmFkZSIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siCgogICAgICB2YXIgeG1sSHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAgICAgeG1sSHR0cC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmFkZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKCiAgICAgICAgaWYgKHhtbEh0dHAucmVhZHlTdGF0ZSA9PSA0ICYmIHhtbEh0dHAuc3RhdHVzID09IDIwMCkKICAgICAgICB7CiAgICAgICAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgICAgaWYgKHJlc3AuT2sgPT0gZmFsc2UpCiAgICAgICAgICB7CiAgICAgICAgICAgIGlmIChyZXNwWydFcnJvciddID09ICJBRCBBRERSRVNTIE5PVCBSRVNPTFZFRCIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2FnZSIpLmlubmVySFRNTCA9ICJFbCBzZXJ2aWRvciBkZSBkb21pbmlvIG5vIHNlIGhhIHBvZGlkbyBlbmNvbnRyYXIuIFBvciBmYXZvciBpbmZvcm1lIGEgc3UgYWRtaW5pc3RyYWRvciBkZSByZWQgc29icmUgZGljaG8gc3VjZXNvLiBEaXNjdWxwZSBsb3MgaW5jb252ZW5pZW50ZXMuIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BbJ0Vycm9yJ10gPT0gIkFETUlOIEFVVEggRkFJTEVEIikKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuaW5uZXJIVE1MID0gIkVycm9yIGRlIGF1dGVudGljYWNpJm9hY3V0ZTtuIHBvciBwYXJ0ZSBkZWwgYWRtaW5pc3RyYWRvci4gUG9yIGZhdm9yIGluZm9ybWUgYSBzdSBhZG1pbmlzdHJhZG9yIGRlIHJlZCBzb2JyZSBkaWNobyBzdWNlc28uIERpc2N1bHBlIGxvcyBpbmNvbnZlbmllbnRlcy4iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocmVzcFsnRXJyb3InXSA9PSAiVVNFUiBBVVRIIEZBSUxFRCIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2FnZSIpLmlubmVySFRNTCA9ICJFcnJvciBkZSBhdXRlbnRpY2FjaSZvYWN1dGU7bi4gQ29tcHJ1ZWJlIHF1ZSBzdXMgY3JlZGVuY2lhbGVzIHNlYW4gbGFzIGNvcnJlY3Rhcy4iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocmVzcFsnRXJyb3InXSA9PSAiQ09OVFJBSU5TIikKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuaW5uZXJIVE1MID0gIkxhIGNvbnRyYXNlJm50aWxkZTthIHF1ZSB1c3RlZCBhIGdlbmVyYWRvIG5vIGN1bXBsZSBjb24gbG9zIHJlcXVpc2l0b3MgbSZpYWN1dGU7bmltb3MgZGUgY29tcGxlamlkYWQuIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuaW5uZXJIVE1MID0gcmVzcFsnRXJyb3InXSArICIuIFBvciBmYXZvciBpbmZvcm1lIGEgc3UgYWRtaW5pc3RyYWRvciBkZSByZWQgc29icmUgZGljaG8gc3VjZXNvLiBEaXNjdWxwZSBsb3MgaW5jb252ZW5pZW50ZXMuIgogICAgICAgICAgICB9CgogICAgICAgICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdmctaWNvbi1lcnJvcicpCgogICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hbmltYXRlZCcpOwogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLWFuaW1hdGVkJyk7CgogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuc3R5bGUuZGlzcGxheSA9ICJibG9jayIKCiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFuaW1hdGVkJyk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2FnZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIKICAgICAgICAgICAgICB9LCA3MDAwKTsKICAgICAgICAgICAgfSwgNTApOwogICAgICAgICAgfQogICAgICAgICAgZWxzZQogICAgICAgICAgewogICAgICAgICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdmctaWNvbi1zdWNjZXNzJykKCiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFuaW1hdGVkJyk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaXMtYW5pbWF0ZWQnKTsKCiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFuaW1hdGVkJyk7CiAgICAgICAgICAgICAgfSwgMjAwMCk7CiAgICAgICAgICAgIH0sIDUwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgeG1sSHR0cC5hZGRFdmVudExpc3RlbmVyKCJlcnJvciIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1lc3NhZ2UiKS5pbm5lckhUTUwgPSAiSGEgb2N1cnJpZG8gdW4gZXJyb3IgZW4gZWwgc2Vydmlkb3IuIFBvciBmYXZvciBpbmZvcm1lIGEgc3UgYWRtaW5pc3RyYWRvciBkZSByZWQgc29icmUgZGljaG8gc3VjZXNvLiIKCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZhZGUiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiCiAgICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3ZnLWljb24tZXJyb3InKQoKICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hbmltYXRlZCcpOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLWFuaW1hdGVkJyk7CgogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2FnZSIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siCgogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYW5pbWF0ZWQnKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuc3R5bGUuZGlzcGxheSA9ICJub25lIgogICAgICAgICAgICB9LCA3MDAwKTsKICAgICAgICB9LCA1MCk7CiAgICAgIH0pOwoKICAgICAgeG1sSHR0cC5vcGVuKCJQT1NUIiwgIi9jaGFuZ2VQYXNzd29yZCIpOwogICAgICB4bWxIdHRwLnNlbmQoZm9ybURhdGEpOwogICAgfQoKICAgIC8vIEFjY2VzcyB0aGUgZm9ybSBlbGVtZW50Li4uCiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJkYXRhLWZvcm0iKTsKCiAgICAvLyAuLi5hbmQgdGFrZSBvdmVyIGl0cyBzdWJtaXQgZXZlbnQuCiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoInN1Ym1pdCIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgc3VibWl0Rm9ybUFqYXgoKTsKICAgIH0pOwogIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K\"")
	packr.PackJSONBytes("./template", "juration.js", "\"LyoKICoganVyYXRpb24gLSBhIG5hdHVyYWwgbGFuZ3VhZ2UgZHVyYXRpb24gcGFyc2VyCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kb21jaHJpc3RpZS9qdXJhdGlvbgogKgogKiBDb3B5cmlnaHQgMjAxMSwgRG9tIENocmlzdGllCiAqIExpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZQogKgogKi8KCihmdW5jdGlvbigpIHsKCiAgdmFyIFVOSVRTID0gewogICAgc2Vjb25kczogewogICAgICBwYXR0ZXJuczogWydzZWd1bmRvJywgJ3NlZycsICdzJ10sCiAgICAgIHZhbHVlOiAxLAogICAgICBmb3JtYXRzOiB7CiAgICAgICAgJ2Nocm9ubyc6ICcnLAogICAgICAgICdtaWNybyc6ICAncycsCiAgICAgICAgJ3Nob3J0JzogICdzZWcnLAogICAgICAgICdsb25nJzogICAnc2VndW5kbycKICAgICAgfQogICAgfSwKICAgIG1pbnV0ZXM6IHsKICAgICAgcGF0dGVybnM6IFsnbWludXRvJywgJ21pbicsICdtKD8hcyknXSwKICAgICAgdmFsdWU6IDYwLAogICAgICBmb3JtYXRzOiB7CiAgICAgICAgJ2Nocm9ubyc6ICc6JywKICAgICAgICAnbWljcm8nOiAgJ20nLAogICAgICAgICdzaG9ydCc6ICAnbWluJywKICAgICAgICAnbG9uZyc6ICAgJ21pbnV0bycKICAgICAgfQogICAgfSwKICAgIGhvdXJzOiB7CiAgICAgIHBhdHRlcm5zOiBbJ2hvcmEnLCAnaHInLCAnaCddLAogICAgICB2YWx1ZTogMzYwMCwKICAgICAgZm9ybWF0czogewogICAgICAgICdjaHJvbm8nOiAnOicsCiAgICAgICAgJ21pY3JvJzogICdoJywKICAgICAgICAnc2hvcnQnOiAgJ2hyJywKICAgICAgICAnbG9uZyc6ICAgJ2hvcmEnCiAgICAgIH0KICAgIH0sCiAgICBkYXlzOiB7CiAgICAgIHBhdHRlcm5zOiBbJ2RheScsICdkeScsICdkJ10sCiAgICAgIHZhbHVlOiA4NjQwMCwKICAgICAgZm9ybWF0czogewogICAgICAgICdjaHJvbm8nOiAnOicsCiAgICAgICAgJ21pY3JvJzogICdkJywKICAgICAgICAnc2hvcnQnOiAgJ2TDrWEnLAogICAgICAgICdsb25nJzogICAnZGlhJwogICAgICB9CiAgICB9LAogICAgd2Vla3M6IHsKICAgICAgcGF0dGVybnM6IFsnc2VtYW5hJywgJ3drJywgJ3cnXSwKICAgICAgdmFsdWU6IDYwNDgwMCwKICAgICAgZm9ybWF0czogewogICAgICAgICdjaHJvbm8nOiAnOicsCiAgICAgICAgJ21pY3JvJzogICd3JywKICAgICAgICAnc2hvcnQnOiAgJ3drJywKICAgICAgICAnbG9uZyc6ICAgJ3NlbWFuYScKICAgICAgfQogICAgfSwKICAgIG1vbnRoczogewogICAgICBwYXR0ZXJuczogWydtZXMnLCAnbWVzJywgJ21vJywgJ210aCddLAogICAgICB2YWx1ZTogMjYyODAwMCwKICAgICAgZm9ybWF0czogewogICAgICAgICdjaHJvbm8nOiAnOicsCiAgICAgICAgJ21pY3JvJzogICdtJywKICAgICAgICAnc2hvcnQnOiAgJ210aCcsCiAgICAgICAgJ2xvbmcnOiAgICdtZXMnCiAgICAgIH0KICAgIH0sCiAgICB5ZWFyczogewogICAgICBwYXR0ZXJuczogWyd5ZWFyJywgJ3lyJywgJ3knXSwKICAgICAgdmFsdWU6IDMxNTM2MDAwLAogICAgICBmb3JtYXRzOiB7CiAgICAgICAgJ2Nocm9ubyc6ICc6JywKICAgICAgICAnbWljcm8nOiAgJ3knLAogICAgICAgICdzaG9ydCc6ICAnYSZudGlsZGU7bycsCiAgICAgICAgJ2xvbmcnOiAgICdhJm50aWxkZTtvJwogICAgICB9CiAgICB9CiAgfTsKCiAgdmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uKHNlY29uZHMsIG9wdGlvbnMpIHsKCiAgICBpZighX2lzTnVtZXJpYyhzZWNvbmRzKSkgewogICAgICB0aHJvdyAianVyYXRpb24uc3RyaW5naWZ5KCk6IFVuYWJsZSB0byBzdHJpbmdpZnkgYSBub24tbnVtZXJpYyB2YWx1ZSI7CiAgICB9CgogICAgaWYoKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkKSAmJiAob3B0aW9ucy5mb3JtYXQgIT09ICdtaWNybycgJiYgb3B0aW9ucy5mb3JtYXQgIT09ICdzaG9ydCcgJiYgb3B0aW9ucy5mb3JtYXQgIT09ICdsb25nJyAmJiBvcHRpb25zLmZvcm1hdCAhPT0gJ2Nocm9ubycpKSB7CiAgICAgIHRocm93ICJqdXJhdGlvbi5zdHJpbmdpZnkoKTogZm9ybWF0IGNhbm5vdCBiZSAnIiArIG9wdGlvbnMuZm9ybWF0ICsgIicsIGFuZCBtdXN0IGJlIGVpdGhlciAnbWljcm8nLCAnc2hvcnQnLCBvciAnbG9uZyciOwogICAgfQoKICAgIHZhciBkZWZhdWx0cyA9IHsKICAgICAgZm9ybWF0OiAnc2hvcnQnLAogICAgICB1bml0czogdW5kZWZpbmVkCiAgICB9OwoKICAgIHZhciBvcHRzID0gX2V4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7CgogICAgdmFyIHVuaXRzID0gWyd5ZWFycycsICdtb250aHMnLCAnZGF5cycsICdob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXSwgdmFsdWVzID0gW107CiAgICB2YXIgcmVtYWluaW5nID0gc2Vjb25kczsKICAgIHZhciBhY3RpdmVVbml0cyA9IDA7CiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB1bml0cy5sZW5ndGg7CiAgICAgICAgaSA8IGxlbiAmJiAob3B0cy51bml0cyA9PSB1bmRlZmluZWQgfHwgYWN0aXZlVW5pdHMgPCBvcHRzLnVuaXRzKTsKICAgICAgICBpKyspIHsKICAgICAgdmFyIHVuaXQgPSBVTklUU1t1bml0c1tpXV07CiAgICAgIHZhbHVlc1tpXSA9IE1hdGguZmxvb3IocmVtYWluaW5nIC8gdW5pdC52YWx1ZSk7CiAgICAgIGlmICh2YWx1ZXNbaV0gPiAwIHx8IGFjdGl2ZVVuaXRzID4gMCkKICAgICAgICBhY3RpdmVVbml0cysrOwoKICAgICAgaWYob3B0cy5mb3JtYXQgPT09ICdtaWNybycgfHwgb3B0cy5mb3JtYXQgPT09ICdjaHJvbm8nKSB7CiAgICAgICAgdmFsdWVzW2ldICs9IHVuaXQuZm9ybWF0c1tvcHRzLmZvcm1hdF07CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdmFsdWVzW2ldICs9ICcgJyArIF9wbHVyYWxpemUodmFsdWVzW2ldLCB1bml0LmZvcm1hdHNbb3B0cy5mb3JtYXRdKTsKICAgICAgfQogICAgICByZW1haW5pbmcgPSByZW1haW5pbmcgJSB1bml0LnZhbHVlOwogICAgfQogICAgdmFyIG91dHB1dCA9ICcnOwogICAgZm9yKGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgaWYodmFsdWVzW2ldLmNoYXJBdCgwKSAhPT0gIjAiICYmIG9wdHMuZm9ybWF0ICE9ICdjaHJvbm8nKSB7CiAgICAgICAgb3V0cHV0ICs9IHZhbHVlc1tpXSArICcgJzsKICAgICAgfQogICAgICBlbHNlIGlmIChvcHRzLmZvcm1hdCA9PSAnY2hyb25vJykgewogICAgICAgIG91dHB1dCArPSBfcGFkTGVmdCh2YWx1ZXNbaV0rJycsICcwJywgaT09dmFsdWVzLmxlbmd0aC0xID8gMiA6IDMpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoL1xzKyQvLCAnJykucmVwbGFjZSgvXigwMDopKy9nLCAnJykucmVwbGFjZSgvXjAvLCAnJyk7CiAgfTsKCiAgdmFyIHBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7CgogICAgLy8gcmV0dXJucyBjYWxjdWxhdGVkIHZhbHVlcyBzZXBhcmF0ZWQgYnkgc3BhY2VzCiAgICBmb3IodmFyIHVuaXQgaW4gVU5JVFMpIHsKICAgICAgZm9yKHZhciBpID0gMCwgbUxlbiA9IFVOSVRTW3VuaXRdLnBhdHRlcm5zLmxlbmd0aDsgaSA8IG1MZW47IGkrKykgewogICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoIigoPzpcXGQrXFwuXFxkKyl8XFxkKylcXHM/KCIgKyBVTklUU1t1bml0XS5wYXR0ZXJuc1tpXSArICJzPyg/PVxcc3xcXGR8XFxiKSkiLCAnZ2knKTsKICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleCwgZnVuY3Rpb24oc3RyLCBwMSwgcDIpIHsKICAgICAgICAgIHJldHVybiAiICIgKyAocDEgKiBVTklUU1t1bml0XS52YWx1ZSkudG9TdHJpbmcoKSArICIgIjsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIHZhciBzdW0gPSAwLAogICAgICAgIG51bWJlcnMgPSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKD8hXC4pXFcrL2csICcgJykgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2VzIG5vbi13b3JkIGNoYXJzIChleGNsdWRpbmcgJy4nKSB3aXRoIHdoaXRlc3BhY2UKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXlxzK3xccyskfCg/OmFuZHxwbHVzfHdpdGgpXHM/L2csICcnKSAgIC8vIHRyaW0gTC9SIHdoaXRlc3BhY2UsIHJlcGxhY2Uga25vd24gam9pbiB3b3JkcyB3aXRoICcnCiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcgJyk7CgogICAgZm9yKHZhciBqID0gMCwgbkxlbiA9IG51bWJlcnMubGVuZ3RoOyBqIDwgbkxlbjsgaisrKSB7CiAgICAgIGlmKG51bWJlcnNbal0gJiYgaXNGaW5pdGUobnVtYmVyc1tqXSkpIHsKICAgICAgICAgc3VtICs9IHBhcnNlRmxvYXQobnVtYmVyc1tqXSk7CiAgICAgIH0gZWxzZSBpZighbnVtYmVyc1tqXSkgewogICAgICAgIHRocm93ICJqdXJhdGlvbi5wYXJzZSgpOiBVbmFibGUgdG8gcGFyc2U6IGEgZmFsc2V5IHZhbHVlIjsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgaXQncyBub3QgYSB2YWxpZCB3b3JkL3VuaXQKICAgICAgICB0aHJvdyAianVyYXRpb24ucGFyc2UoKTogVW5hYmxlIHRvIHBhcnNlOiAiICsgbnVtYmVyc1tqXS5yZXBsYWNlKC9eXGQrL2csICcnKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHN1bTsKICB9OwoKICAvLyBfcGFkTGVmdCgnNScsICcwJywgMik7IC8vIDA1CiAgdmFyIF9wYWRMZWZ0ID0gZnVuY3Rpb24ocywgYywgbikgewogICAgICBpZiAoISBzIHx8ICEgYyB8fCBzLmxlbmd0aCA+PSBuKSB7CiAgICAgICAgcmV0dXJuIHM7CiAgICAgIH0KCiAgICAgIHZhciBtYXggPSAobiAtIHMubGVuZ3RoKS9jLmxlbmd0aDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXg7IGkrKykgewogICAgICAgIHMgPSBjICsgczsKICAgICAgfQoKICAgICAgcmV0dXJuIHM7CiAgfTsKCiAgdmFyIF9wbHVyYWxpemUgPSBmdW5jdGlvbihjb3VudCwgc2luZ3VsYXIpIHsKICAgIHJldHVybiBjb3VudCA9PSAxID8gc2luZ3VsYXIgOiBzaW5ndWxhciArICJzIjsKICB9OwoKICB2YXIgX2lzTnVtZXJpYyA9IGZ1bmN0aW9uKG4pIHsKICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7CiAgfTsKCiAgdmFyIF9leHRlbmQgPSBmdW5jdGlvbihvYmosIGV4dE9iaikgewogICAgZm9yICh2YXIgaSBpbiBleHRPYmopIHsKICAgICAgaWYoZXh0T2JqW2ldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBvYmpbaV0gPSBleHRPYmpbaV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmo7CiAgfTsKCiAgdmFyIGp1cmF0aW9uID0gewogICAgcGFyc2U6IHBhcnNlLAogICAgc3RyaW5naWZ5OiBzdHJpbmdpZnksCiAgICBodW1hbml6ZTogc3RyaW5naWZ5CiAgfTsKCiAgaWYgKCB0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IiAmJiBtb2R1bGUgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAib2JqZWN0IiApIHsKICAgIC8vbG9hZGVycyB0aGF0IGltcGxlbWVudCB0aGUgTm9kZSBtb2R1bGUgcGF0dGVybiAoaW5jbHVkaW5nIGJyb3dzZXJpZnkpCiAgICBtb2R1bGUuZXhwb3J0cyA9IGp1cmF0aW9uOwogIH0gZWxzZSB7CiAgICAvLyBPdGhlcndpc2UgZXhwb3NlIGp1cmF0aW9uCiAgICB3aW5kb3cuanVyYXRpb24gPSBqdXJhdGlvbjsKCiAgICAvLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUKICAgIGlmICggdHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kICkgewogICAgICBkZWZpbmUoImp1cmF0aW9uIiwgW10sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGp1cmF0aW9uOyB9ICk7CiAgICB9CiAgfQp9KSgpOwo=\"")
	packr.PackJSONBytes("./template", "style.css", "\"Ci5sb2dpbi1wYWdlIHsKICB3aWR0aDogMzYwcHg7CiAgcGFkZGluZzogOCUgMCAwOwogIG1hcmdpbjogYXV0bzsKfQouZm9ybSB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHotaW5kZXg6IDE7CiAgYmFja2dyb3VuZDogI0ZGRkZGRjsKICBtYXgtd2lkdGg6IDM2MHB4OwogIG1hcmdpbjogMCBhdXRvIDEwMHB4OwogIHBhZGRpbmc6IDQ1cHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGJveC1zaGFkb3c6IDAgMCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDVweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMjQpOwp9Ci5mb3JtIGlucHV0IHsKICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKICBvdXRsaW5lOiAwOwogIGJhY2tncm91bmQ6ICNmMmYyZjI7CiAgd2lkdGg6IDEwMCU7CiAgYm9yZGVyOiAwOwogIG1hcmdpbjogMCAwIDE1cHg7CiAgcGFkZGluZzogMTVweDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGZvbnQtc2l6ZTogMTRweDsKfQouZm9ybSBidXR0b24gewogIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgb3V0bGluZTogMDsKICBiYWNrZ3JvdW5kOiAjNENBRjUwOwogIHdpZHRoOiAxMDAlOwogIGJvcmRlcjogMDsKICBwYWRkaW5nOiAxNXB4OwogIGNvbG9yOiAjRkZGRkZGOwogIGZvbnQtc2l6ZTogMTRweDsKICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjMgZWFzZTsKICB0cmFuc2l0aW9uOiBhbGwgMC4zIGVhc2U7CiAgY3Vyc29yOiBwb2ludGVyOwp9Ci5mb3JtIGJ1dHRvbjpob3ZlciwuZm9ybSBidXR0b246YWN0aXZlLC5mb3JtIGJ1dHRvbjpmb2N1cyB7CiAgYmFja2dyb3VuZDogIzQzQTA0NzsKfQouY29udGFpbmVyIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgei1pbmRleDogMTsKICBtYXgtd2lkdGg6IDMwMHB4OwogIG1hcmdpbjogMCBhdXRvOwp9Ci5jb250YWluZXI6YmVmb3JlLCAuY29udGFpbmVyOmFmdGVyIHsKICBjb250ZW50OiAiIjsKICBkaXNwbGF5OiBibG9jazsKICBjbGVhcjogYm90aDsKfQouY29udGFpbmVyIC5pbmZvIHsKICBtYXJnaW46IDUwcHggYXV0bzsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLmNvbnRhaW5lciAuaW5mbyBoMSB7CiAgbWFyZ2luOiAwIDAgMTVweDsKICBwYWRkaW5nOiAwOwogIGZvbnQtc2l6ZTogMzZweDsKICBmb250LXdlaWdodDogMzAwOwogIGNvbG9yOiAjMWExYTFhOwp9Ci5jb250YWluZXIgLmluZm8gc3BhbiB7CiAgY29sb3I6ICM0ZDRkNGQ7CiAgZm9udC1zaXplOiAxMnB4Owp9Ci5jb250YWluZXIgLmluZm8gc3BhbiBhIHsKICBjb2xvcjogIzAwMDAwMDsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KLmNvbnRhaW5lciAuaW5mbyBzcGFuIC5mYSB7CiAgY29sb3I6ICNFRjNCM0E7Cn0KCmJvZHkgewogICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwp9CgojbG9nbyB7CiAgbWFyZ2luOiBhdXRvOwogIGRpc3BsYXk6YmxvY2sKfQoKI21lc3NhZ2UgewogIC8qdGV4dC1hbGlnbjoganVzdGlmeTsqLwogIGRpc3BsYXk6IG5vbmU7CiAgbWFyZ2luLWJvdHRvbTogNDBweDsKfQoKI2ZhZGUgewogIHBvc2l0aW9uOiBmaXhlZDsKICBoZWlnaHQ6IDEwMCU7CiAgd2lkdGg6IDEwMCU7CiAgbGVmdDogMDsKICB0b3A6IDA7CiAgYmFja2dyb3VuZDogIzAwMDAwMEJGOwogIHotaW5kZXg6IDE5OTk7CiAgZGlzcGxheTogbm9uZTsKfQoKLmxkcy1lbGxpcHNpcyB7CiAgLypkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ki8KICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgd2lkdGg6IDY0cHg7CiAgaGVpZ2h0OiA2NHB4OwogIG1hcmdpbjogYXV0bzsKICBkaXNwbGF5OiBibG9jazsKICB0b3A6IDM1JTsKfQoubGRzLWVsbGlwc2lzIGRpdiB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMjdweDsKICB3aWR0aDogMTFweDsKICBoZWlnaHQ6IDExcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGJhY2tncm91bmQ6ICNmZmY7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDEsIDEsIDApOwp9Ci5sZHMtZWxsaXBzaXMgZGl2Om50aC1jaGlsZCgxKSB7CiAgbGVmdDogNnB4OwogIGFuaW1hdGlvbjogbGRzLWVsbGlwc2lzMSAwLjZzIGluZmluaXRlOwp9Ci5sZHMtZWxsaXBzaXMgZGl2Om50aC1jaGlsZCgyKSB7CiAgbGVmdDogNnB4OwogIGFuaW1hdGlvbjogbGRzLWVsbGlwc2lzMiAwLjZzIGluZmluaXRlOwp9Ci5sZHMtZWxsaXBzaXMgZGl2Om50aC1jaGlsZCgzKSB7CiAgbGVmdDogMjZweDsKICBhbmltYXRpb246IGxkcy1lbGxpcHNpczIgMC42cyBpbmZpbml0ZTsKfQoubGRzLWVsbGlwc2lzIGRpdjpudGgtY2hpbGQoNCkgewogIGxlZnQ6IDQ1cHg7CiAgYW5pbWF0aW9uOiBsZHMtZWxsaXBzaXMzIDAuNnMgaW5maW5pdGU7Cn0KQGtleWZyYW1lcyBsZHMtZWxsaXBzaXMxIHsKICAwJSB7CiAgICB0cmFuc2Zvcm06IHNjYWxlKDApOwogIH0KICAxMDAlIHsKICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7CiAgfQp9CkBrZXlmcmFtZXMgbGRzLWVsbGlwc2lzMyB7CiAgMCUgewogICAgdHJhbnNmb3JtOiBzY2FsZSgxKTsKICB9CiAgMTAwJSB7CiAgICB0cmFuc2Zvcm06IHNjYWxlKDApOwogIH0KfQpAa2V5ZnJhbWVzIGxkcy1lbGxpcHNpczIgewogIDAlIHsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDApOwogIH0KICAxMDAlIHsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDE5cHgsIDApOwogIH0KfQoKCi5zdmctaWNvbi1zdWNjZXNzLAouc3ZnLWljb24tZXJyb3IgewogIHdpZHRoOiA1MHB4OwogIGhlaWdodDogNTBweDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogOTMlOwogIGxlZnQ6IDQ3JTsKICBtYXJnaW46IC0yNXB4IDAgMCAtMjVweDsKICBvcGFjaXR5OiAwOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCk7Cn0KCi5zdmctaWNvbi1lcnJvciB7CiAgbGVmdDogaW5pdGlhbDsKfQoKLnN2Zy1pY29uLXN1Y2Nlc3MgLmNpcmNsZS1jaGVjayB7CiAgZmlsbDogbm9uZTsKICBmaWxsLW9wYWNpdHk6IDA7CiAgc3Ryb2tlOiAjZmZmOwogIHN0cm9rZS13aWR0aDogNHB4OwogIHN0cm9rZS1sb2NhdGlvbjogaW5zaWRlOwogIHN0cm9rZS1kYXNoYXJyYXk6IDAgMTAwOwp9Cgouc3ZnLWljb24tc3VjY2Vzcy5pcy1hbmltYXRlZCwKLnN2Zy1pY29uLWVycm9yLmlzLWFuaW1hdGVkIHsKICBhbmltYXRpb24tbmFtZTogYm91bmNlSW5Eb3duOwogIGFuaW1hdGlvbi1kdXJhdGlvbjogMC41czsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwp9Cgouc3ZnLWljb24tc3VjY2Vzcy5pcy1hbmltYXRlZCAuY2lyY2xlLWNoZWNrIHsKICBhbmltYXRpb24tbmFtZTogZGFzaGFycmF5OwogIGFuaW1hdGlvbi1kdXJhdGlvbjogMC41czsKICBhbmltYXRpb24tZGVsYXk6IDAuM3M7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7CiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDsKfQoKLnN2Zy1pY29uLWVycm9yLmlzLWFuaW1hdGVkIC54LXNpbmdsZSB7CiAgYW5pbWF0aW9uLW5hbWU6IHJvdGF0ZTsKICBhbmltYXRpb24tZHVyYXRpb246IDAuNXM7CiAgYW5pbWF0aW9uLWRlbGF5OiAwLjNzOwogIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0OwogIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7CiAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTsKfQoKLyoqCiAqIEFuaW1hdGlvbnMKICovCgovKioKICogQHNvdXJjZSBhbmltYXRlLmNzcyAtIGJvdW5jZUluRG93bgogKi8KQGtleWZyYW1lcyBib3VuY2VJbkRvd24gewogIGZyb20sIDYwJSwgNzUlLCA5MCUsIHRvIHsKICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MTAsIDAuMzU1LCAxLjAwMCk7CiAgfQoKICAwJSB7CiAgICBvcGFjaXR5OiAwOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzAwMHB4LCAwKTsKICB9CgogIDYwJSB7CiAgICBvcGFjaXR5OiAxOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyNXB4LCAwKTsKICB9CgogIDc1JSB7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTsKICB9CgogIDkwJSB7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDVweCwgMCk7CiAgfQoKICB0byB7CiAgICBvcGFjaXR5OiAxOwogICAgdHJhbnNmb3JtOiBub25lOwogIH0KfQoKQGtleWZyYW1lcyBkYXNoYXJyYXkgewogIDAlIHsKICAgIHN0cm9rZS1kYXNoYXJyYXk6IDAgMTAwOwogIH0KCiAgMTAwJSB7CiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDAgMDsKICB9Cn0KCkBrZXlmcmFtZXMgcm90YXRlIHsKICAwJSB7CiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwKTsKICB9CgogIDEwMCUgewogICAgdHJhbnNmb3JtOiByb3RhdGUoMzE1ZGVnKTsKICB9Cn0KCi5zdHJvbmcgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICB3aWR0aDogNDlweDsKICBoZWlnaHQ6IDNweDsKfQoKI3N0cjEgewogIGJhY2tncm91bmQtY29sb3I6ICNmNDQzMzY7Cn0KCiNzdHIyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZFQjNCOwogIGRpc3BsYXk6IG5vbmU7Cn0KCiNzdHIzIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE5NkYzOwogIGRpc3BsYXk6IG5vbmU7Cn0KCiNzdHI0IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwOwogIGRpc3BsYXk6IG5vbmU7Cn0KCiNuZXdfcGFzcyB7CiAgbWFyZ2luLWJvdHRvbTogMHB4Owp9Cg==\"")
	packr.PackJSONBytes("./template", "zxcvbn.js", "\"\"")
}
